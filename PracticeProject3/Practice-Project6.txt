class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class CircularLinkedList {
    private Node head;

    public CircularLinkedList() {
        this.head = null;
    }

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            newNode.next = head;
        } else {
            Node currentNode = head;
            while (currentNode.next != head) {
                currentNode = currentNode.next;
            }
            currentNode.next = newNode;
            newNode.next = head;
            head = newNode;
        }
    }

    public void insertInSortedOrder(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            newNode.next = head;
            return;
        }

        Node currentNode = head;
        Node prevNode = null;

        do {
            prevNode = currentNode;
            currentNode = currentNode.next;

            if (data <= currentNode.data) {
                break;
            }
        } while (currentNode != head);

        newNode.next = currentNode;
        prevNode.next = newNode;

        if (currentNode == head) {
            head = newNode;
        }
    }

    public void display() {
        if (head == null) {
            System.out.println("Circular linked list is empty.");
            return;
        }

        Node currentNode = head;
        do {
            System.out.print(currentNode.data + " ");
            currentNode = currentNode.next;
        } while (currentNode != head);
        System.out.println();
    }

    public static void main(String[] args) {
        CircularLinkedList list = new CircularLinkedList();

        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);
        list.insert(50);

        System.out.println("Circular Linked List before insertion:");
        list.display();

        int newElement = 25;
        list.insertInSortedOrder(newElement);

        System.out.println("Circular Linked List after inserting " + newElement + ":");
        list.display();
    }
}
